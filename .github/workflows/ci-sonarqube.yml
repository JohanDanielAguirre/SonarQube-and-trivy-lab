name: CI - Tests + Local SonarQube (Docker)

on:
  push:
    branches: [ "**" ]
  pull_request:
    branches: [ "**" ]

jobs:
  test-and-sonar:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm install

      - name: Run unit tests with coverage
        run: |
          npm run test:cov

      - name: Install curl and jq
        run: |
          sudo apt-get update
          sudo apt-get install -y curl jq

      - name: Pre-pull SonarQube image
        run: |
          docker pull sonarqube:latest

      - name: Start SonarQube in Docker
        run: |
          docker run -d --name sonarqube -p 9000:9000 -v sonarqube_data:/opt/sonarqube/data sonarqube:latest

      - name: Wait for SonarQube to be UP
        shell: bash
        run: |
          set -e
          echo "Waiting for SonarQube status..."
          sleep 10
          STATUS=""
          for i in {1..120}; do
            STATUS=$(curl -sS --max-time 2 http://localhost:9000/api/system/status 2>/dev/null | jq -r '.status // empty') || true
            echo "Attempt $i - Status: ${STATUS:-<no-response>}"
            if [ "$STATUS" = "UP" ]; then
              break
            fi
            sleep 5
          done
          if [ "$STATUS" != "UP" ]; then
            echo "Primary wait timeout. Checking container logs for 'SonarQube is operational'..." >&2
            docker logs --tail 500 sonarqube | tee /tmp/sonar_logs.txt || true
            if grep -q "SonarQube is operational" /tmp/sonar_logs.txt; then
              echo "Logs indicate SonarQube is operational. Performing grace polling..."
              for j in {1..12}; do
                STATUS=$(curl -sS --max-time 2 http://localhost:9000/api/system/status 2>/dev/null | jq -r '.status // empty') || true
                echo "Grace Attempt $j - Status: ${STATUS:-<no-response>}"
                if [ "$STATUS" = "UP" ]; then
                  break
                fi
                sleep 5
              done
            fi
          fi
          if [ "$STATUS" != "UP" ]; then
            echo "SonarQube did not become UP after grace period" >&2
            docker logs --tail 200 sonarqube || true
            exit 1
          fi

      - name: Initialize admin password (idempotent)
        shell: bash
        run: |
          # Change default admin password if first run; ignore errors otherwise
          curl -s -X POST -u admin:admin \
            -d login=admin -d previousPassword=admin -d password=admin123 \
            http://localhost:9000/api/users/change_password || true

      - name: Generate SonarQube token for CI (session-based with fallbacks)
        id: token
        shell: bash
        env:
          SONAR_USERNAME: ${{ secrets.SONAR_USERNAME }}
          SONAR_PASSWORD: ${{ secrets.SONAR_PASSWORD }}
        run: |
          set -e
          COOKIE=/tmp/sonar_cookies.txt
          NAME="ci-token-${GITHUB_RUN_ID:-manual}-${GITHUB_RUN_ATTEMPT:-0}-$(date +%s)"

          # Build credential candidates: repo secrets first (if provided), then user-provided, then common defaults
          CANDIDATES=()
          if [ -n "${SONAR_USERNAME}" ] && [ -n "${SONAR_PASSWORD}" ]; then
            CANDIDATES+=("${SONAR_USERNAME}:${SONAR_PASSWORD}")
          fi
          CANDIDATES+=(
            "admin:Daniel1026."
            "sonar:Daniel1026."
            "admin:admin123"
            "admin:admin"
            "sonar:sonar"
          )

          AUTH_USER=""
          AUTH_PASS=""

          for C in "${CANDIDATES[@]}"; do
            U="${C%%:*}"; P="${C#*:}"
            echo "Trying session login with ${U}:********"
            rm -f "$COOKIE"
            curl -sS -c "$COOKIE" -X POST \
              -d login="$U" -d password="$P" \
              http://localhost:9000/api/authentication/login > /dev/null || true
            AUTH=$(curl -sS -b "$COOKIE" http://localhost:9000/api/authentication/validate | jq -r '.valid // .isAuthenticated // empty')
            echo "Auth valid? -> ${AUTH:-false}"
            if [ "$AUTH" = "true" ]; then
              AUTH_USER="$U"; AUTH_PASS="$P"; break
            fi
          done

          if [ -z "$AUTH_USER" ]; then
            echo "Failed to authenticate with provided and default credentials" >&2
            exit 1
          fi

          echo "Generating token name=${NAME} via /api/user_tokens/generate as ${AUTH_USER}..."
          RESP=$(curl -sS -b "$COOKIE" -X POST \
            -H 'Accept: application/json' \
            http://localhost:9000/api/user_tokens/generate \
            -d name=${NAME} -d type=USER_TOKEN || true)
          TOKEN=$(echo "$RESP" | jq -r '.token // empty')

          if [ -z "$TOKEN" ]; then
            echo "Primary token endpoint returned empty; trying /api/v2/user_tokens/generate as fallback..."
            RESP=$(curl -sS -b "$COOKIE" -X POST \
              -H 'Content-Type: application/json' -H 'Accept: application/json' \
              http://localhost:9000/api/v2/user_tokens/generate \
              -d "{\"name\":\"${NAME}\"}" || true)
            TOKEN=$(echo "$RESP" | jq -r '.token // empty')
          fi

          if [ -z "$TOKEN" ]; then
            echo "Failed to obtain token via both endpoints" >&2
            echo "Last response: $RESP" >&2
            exit 1
          fi

          echo "token=$TOKEN" >> $GITHUB_OUTPUT
          echo "authUser=$AUTH_USER" >> $GITHUB_OUTPUT
          echo "authPass=$AUTH_PASS" >> $GITHUB_OUTPUT

      - name: Create project if not exists
        shell: bash
        run: |
          COOKIE=/tmp/sonar_cookies.txt
          if [ -f "$COOKIE" ]; then
            curl -s -b "$COOKIE" -X POST \
              "http://localhost:9000/api/projects/create" \
              -d project=qualifica-o-seu-professor -d name=qualifica-o-seu-professor || true
          else
            echo "Cookie file not found, falling back to Basic auth"
            curl -s -u "${{ steps.token.outputs.authUser }}:${{ steps.token.outputs.authPass }}" -X POST \
              "http://localhost:9000/api/projects/create" \
              -d project=qualifica-o-seu-professor -d name=qualifica-o-seu-professor || true
          fi

      - name: SonarQube Scan (npx sonar-scanner)
        env:
          SONAR_TOKEN: ${{ steps.token.outputs.token }}
        run: |
          npx --yes sonar-scanner \
            -Dsonar.host.url=http://localhost:9000 \
            -Dsonar.token=${SONAR_TOKEN}

      - name: Show SonarQube logs (last lines)
        if: always()
        run: |
          docker logs --tail 200 sonarqube || true

      - name: Tear down SonarQube
        if: always()
        run: |
          docker stop sonarqube || true
          docker rm sonarqube || true
